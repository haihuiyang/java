package com.yhh.example;/** * @author happyfeet * @since Mar 11, 2020 */public class Container {    /*    设计一个容器，数组保存数据，支持增删查改    liangkongrong@huawei.com     */    private Object[] values;    private static final int DEFAULT_LENGTH = 10;    private int length = 0;    private int resizeFactor = 2;    private int size = 0;    public Container(int length) {        this.length = length;        this.values = new Object[length];    }    /**     * just for intenal test     */    Container(Object[] values) {        this.values = values;        this.size = values.length;    }    /**     * just for intenal test     */    Object[] getValues() {        return values;    }    public Container(int resizeFactor, int length) {        this.resizeFactor = resizeFactor;        this.length = length;        this.values = new Object[length];    }    public Container() {        this.values = new Object[DEFAULT_LENGTH];    }    public Object get(int index) {        if (index < 0 || index >= size) {            throw new IndexOutOfBoundsException(index + " out of bound");        }        return values[index];    }    public Object getFirst() {        if (size <= 0) {            return null;        }        return values[0];    }    public Object getLast() {        if (size <= 0) {            return null;        }        return values[size - 1];    }    public void put(Object value) {        if (size == values.length) {            resize();        }        this.values[size++] = value;    }    private void resize() {        Object[] originValues = this.values;        int newSize = length * resizeFactor;        Object[] newValues = new Object[newSize];        for (int index = 0; index < size; index++) {            System.arraycopy(originValues, 0, newValues, 0, size);        }        this.length = newSize;        this.values = newValues;    }    public void update(int index, Object value) {        checkIndex(index, size);        values[index] = value;    }    private void checkIndex(int index, int size) {        if (index < 0 || index >= size) {            throw new IndexOutOfBoundsException(index + " out of bound");        }    }    public Object delete(int index) {        checkIndex(index, size);        Object value = values[index];        for (int i = index; i < size - 1; i++) {            values[i] = values[i + 1];        }        size--;        return value;    }    public int getSize() {        return size;    }}